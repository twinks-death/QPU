name: CMake on GCC/Clang (Cross-platform)

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
            shell: msys2 {0}
            cmake_generator: "MSYS Makefiles"
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang++
            shell: msys2 {0}
            cmake_generator: "MSYS Makefiles"

        exclude:
          - os: windows-latest
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4

      - name: Install MSYS2 and toolchains
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            base-devel
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-clang
            cmake
            make

      - name: Set up build directory path
        id: vars
        shell: bash
        run: echo "out_dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        run: >
          cmake
          -G "${{ matrix.os == 'windows-latest' && matrix.cmake_generator || 'Unix Makefiles' }}"
          -B ${{ steps.vars.outputs.out_dir }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}
        shell: ${{ matrix.shell || 'bash' }}

      - name: Build
        run: cmake --build ${{ steps.vars.outputs.out_dir }} --config ${{ matrix.build_type }}
        shell: ${{ matrix.shell || 'bash' }}

      - name: Run Tests
        working-directory: ${{ steps.vars.outputs.out_dir }}
        run: ctest --build-config ${{ matrix.build_type }}
        shell: ${{ matrix.shell || 'bash' }}
